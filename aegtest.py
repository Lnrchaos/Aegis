#!/usr/bin/env python3
"""
Aegis Test Runner
Runs tests for Aegis projects with support for unit tests and integration tests.
"""

import sys
import os
import subprocess
from pathlib import Path
from typing import List, Dict, Any
import json
import time


class AegisTestRunner:
    def __init__(self, project_root: Path = None):
        self.project_root = project_root or Path.cwd()
        self.test_dir = self.project_root / "tests"
        self.coverage_dir = self.project_root / "coverage"
        
    def run_tests(self, pattern: str = "*.test.aeg", verbose: bool = False) -> bool:
        """Run all tests matching the pattern."""
        if not self.test_dir.exists():
            print("No tests directory found")
            return False
            
        test_files = list(self.test_dir.glob(pattern))
        if not test_files:
            print(f"No test files found matching {pattern}")
            return False
            
        print(f"Running {len(test_files)} test files...")
        
        results = []
        for test_file in test_files:
            result = self.run_test_file(test_file, verbose)
            results.append(result)
            
        # Print summary
        passed = sum(1 for r in results if r['passed'])
        total = len(results)
        
        print(f"\nTest Results: {passed}/{total} passed")
        
        if verbose:
            for result in results:
                status = "PASS" if result['passed'] else "FAIL"
                print(f"  {status}: {result['file']}")
                if not result['passed'] and result['error']:
                    print(f"    Error: {result['error']}")
                    
        return passed == total
        
    def run_test_file(self, test_file: Path, verbose: bool = False) -> Dict[str, Any]:
        """Run a single test file."""
        start_time = time.time()
        
        try:
            # Run the test file through the Aegis interpreter
            result = subprocess.run(
                ['python', '-m', 'aegis', str(test_file)],
                capture_output=True,
                text=True,
                cwd=self.project_root
            )
            
            duration = time.time() - start_time
            passed = result.returncode == 0
            
            return {
                'file': test_file.name,
                'passed': passed,
                'duration': duration,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'error': result.stderr if not passed else None
            }
            
        except Exception as e:
            return {
                'file': test_file.name,
                'passed': False,
                'duration': time.time() - start_time,
                'stdout': '',
                'stderr': '',
                'error': str(e)
            }
            
    def generate_coverage(self) -> None:
        """Generate test coverage report."""
        # This would integrate with a coverage tool
        print("Coverage generation not yet implemented")
        
    def create_test_template(self, name: str) -> None:
        """Create a test template file."""
        self.test_dir.mkdir(exist_ok=True)
        
        template = f'''~ Test file: {name}
~ Generated by aegtest

# Test setup
set test_passed = true
set test_count = 0
set test_passed_count = 0

# Test helper functions
def assert_true(condition, message) {{
    set test_count = test_count + 1
    if not condition {{
        print("FAIL: " + message)
        set test_passed = false
    }} else {{
        set test_passed_count = test_passed_count + 1
        print("PASS: " + message)
    }}
}}

def assert_equal(actual, expected, message) {{
    set test_count = test_count + 1
    if actual != expected {{
        print("FAIL: " + message + " (expected: " + expected + ", got: " + actual + ")")
        set test_passed = false
    }} else {{
        set test_passed_count = test_passed_count + 1
        print("PASS: " + message)
    }}
}}

# Test cases
def test_basic_math() {{
    assert_equal(2 + 2, 4, "Basic addition")
    assert_equal(10 - 3, 7, "Basic subtraction")
}}

def test_string_operations() {{
    set str1 = "hello"
    set str2 = "world"
    set combined = str1 + " " + str2
    assert_equal(combined, "hello world", "String concatenation")
}}

# Run tests
test_basic_math()
test_string_operations()

# Print results
print("\\nTest Summary:")
print("Total tests: " + test_count)
print("Passed: " + test_passed_count)
print("Failed: " + (test_count - test_passed_count))

if not test_passed {{
    exit(1)
}}
'''
        
        test_file = self.test_dir / f"{name}.test.aeg"
        with open(test_file, 'w') as f:
            f.write(template)
        print(f"Created test template: {test_file}")


def main():
    if len(sys.argv) < 2:
        print("Usage: aegtest <command> [options]")
        print("Commands:")
        print("  run [pattern]     Run tests (default: *.test.aeg)")
        print("  create <name>     Create test template")
        print("  coverage          Generate coverage report")
        print("Options:")
        print("  --verbose         Verbose output")
        return
        
    runner = AegisTestRunner()
    command = sys.argv[1]
    
    if command == "run":
        pattern = sys.argv[2] if len(sys.argv) > 2 else "*.test.aeg"
        verbose = "--verbose" in sys.argv
        success = runner.run_tests(pattern, verbose)
        sys.exit(0 if success else 1)
    elif command == "create":
        if len(sys.argv) < 3:
            print("Usage: aegtest create <name>")
            return
        name = sys.argv[2]
        runner.create_test_template(name)
    elif command == "coverage":
        runner.generate_coverage()
    else:
        print(f"Unknown command: {command}")


if __name__ == "__main__":
    main()
